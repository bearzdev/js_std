import "../_dnt.polyfills.js";
import "../_dnt.polyfills.js";
import { IEnvironment, IEnvironmentPath, IEnvironmentVariables } from './interfaces.js';
import { IRuntimeEnvironment, OsFamily, Runtime, RuntimeArch, runtimeInfo, IVersion } from '../runtime/mod.js';
import { newLine, processId, getExitCode, setExitCode, commandLine, commandLineArgs, chdir, cwd, exit } from "./process.js";
import { envVars, EnvironmentVariables } from "./variables.js";
import { envPath, EnvironmentPath } from "./path.js";
export * from './interfaces.js';
declare const userKey: string;
declare const machineNameKey: string;
declare const userDomainKey: string;
export declare class Environment implements IEnvironment {
    #private;
    constructor(envVars: IEnvironmentVariables, envPath: IEnvironmentPath);
    get userInteractive(): boolean;
    set userInteractive(value: boolean);
    get vars(): IEnvironmentVariables;
    get newLine(): string;
    get is64BitProcess(): boolean;
    get os(): OsFamily;
    get arch(): RuntimeArch;
    get runtimeName(): Runtime;
    get runtime(): IRuntimeEnvironment;
    get deno(): boolean;
    get node(): boolean;
    get browser(): boolean;
    get processId(): number;
    get machineName(): string;
    get userName(): string;
    get userDomainName(): string;
    get isCi(): boolean;
    get ciName(): string | undefined;
    get exitCode(): number;
    set exitCode(value: number);
    get commandLine(): string;
    get commandLineArgs(): string[];
    get currentDirectory(): string;
    set currentDirectory(value: string);
    get version(): IVersion;
    get path(): IEnvironmentPath;
    expand(value: string): string;
    has(name: string): boolean;
    get(name: string): string | undefined;
    set(name: string, value: string, isSecret?: boolean): void;
    delete(name: string): void;
    exit(code?: number): void;
}
export declare const env: Environment;
export { envPath, envVars, chdir, cwd, exit, getExitCode, setExitCode, commandLine, commandLineArgs, newLine, processId, runtimeInfo, userDomainKey, userKey, machineNameKey, EnvironmentPath, EnvironmentVariables, };
