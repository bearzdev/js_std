import { ICopyOptions, ICreateDirectoryOptions, IDirectoryInfo, IFileInfo, IMoveOptions, IRemoveOptions, IWriteJsonOptions, IWriteOptions } from './interfaces.js';
export declare const createDirectory: (path: string | URL, options?: ICreateDirectoryOptions | undefined) => void, createDirectoryAsync: (path: string | URL, options?: ICreateDirectoryOptions | undefined) => Promise<void>, copyDirectory: (src: string | URL, dest: string | URL, options?: ICopyOptions | undefined) => void, copyDirectoryAsync: (src: string | URL, dest: string | URL, options?: ICopyOptions | undefined) => Promise<void>, copyFile: (src: string | URL, dest: string) => void, copyFileAsync: (src: string | URL, dest: string) => Promise<void>, exists: (path: string | URL) => boolean, existsAsync: (path: string | URL) => Promise<boolean>, isDirectory: (path: string | URL) => boolean, isDirectoryAsync: (path: string | URL) => Promise<boolean>, isFile: (path: string | URL) => boolean, isFileAsync: (path: string | URL) => Promise<boolean>, move: (src: string | URL, dest: string, options?: IMoveOptions | undefined) => void, moveAsync: (src: string | URL, dest: string, options?: IMoveOptions | undefined) => Promise<void>, readDirectory: (path: string | URL) => IDirectoryInfo[], readDirectoryAsync: (path: string | URL) => Promise<IDirectoryInfo[]>, readFile: (path: string | URL) => Uint8Array, readFileAsync: (path: string | URL) => Promise<Uint8Array>, readTextFile: (path: string | URL) => string, readTextFileAsync: (path: string | URL) => Promise<string>, readJsonFile: (path: string | URL) => any, readJsonFileAsync: (path: string | URL) => Promise<any>, removeDirectory: (path: string | URL, options?: IRemoveOptions | undefined) => void, removeDirectoryAsync: (path: string | URL, options?: IRemoveOptions | undefined) => Promise<void>, removeFile: (path: string | URL) => void, removeFileAsync: (path: string | URL) => Promise<void>, rename: (src: string | URL, dest: string | URL) => void, renameAsync: (src: string | URL, dest: string | URL) => Promise<void>, stat: (path: string | URL) => IFileInfo, statAsync: (path: string | URL) => Promise<IFileInfo>, writeFile: (path: string | URL, data: Uint8Array, options?: IWriteOptions | undefined) => void, writeFileAsync: (path: string | URL, data: Uint8Array, options?: IWriteOptions | undefined) => Promise<void>, writeTextFile: (path: string | URL, data: string, options?: IWriteOptions | undefined) => void, writeTextFileAsync: (path: string | URL, data: string, options?: IWriteOptions | undefined) => Promise<void>, writeJsonFile: (path: string | URL, data: any, options?: IWriteJsonOptions | undefined) => void, writeJsonFileAsync: (path: string | URL, data: any, options?: IWriteJsonOptions | undefined) => Promise<void>;
