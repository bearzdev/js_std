import { IProcessInvocationOptions, IProcessResult, CommandBuilder } from '../deps.js';
export declare function node(args: string, options?: IProcessInvocationOptions): IProcessResult;
export declare function node(args: string[], options?: IProcessInvocationOptions): IProcessResult;
export declare function node(command: CommandBuilder, options?: IProcessInvocationOptions): IProcessResult;
export declare function nodeAsync(args: string, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function nodeAsync(args: string[], options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function nodeAsync(command: CommandBuilder, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function npm(args: string, options?: IProcessInvocationOptions): IProcessResult;
export declare function npm(args: string[], options?: IProcessInvocationOptions): IProcessResult;
export declare function npm(command: CommandBuilder, options?: IProcessInvocationOptions): IProcessResult;
export declare function npmAsync(args: string, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function npmAsync(args: string[], options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function npmAsync(command: CommandBuilder, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function yarn(args: string, options?: IProcessInvocationOptions): IProcessResult;
export declare function yarn(args: string[], options?: IProcessInvocationOptions): IProcessResult;
export declare function yarn(command: CommandBuilder, options?: IProcessInvocationOptions): IProcessResult;
export declare function yarnAsync(args: string, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function yarnAsync(args: string[], options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function yarnAsync(command: CommandBuilder, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function qunit(args: string, options?: IProcessInvocationOptions): IProcessResult;
export declare function qunit(args: string[], options?: IProcessInvocationOptions): IProcessResult;
export declare function qunit(command: CommandBuilder, options?: IProcessInvocationOptions): IProcessResult;
export declare function qunitAsync(args: string, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function qunitAsync(args: string[], options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function qunitAsync(command: CommandBuilder, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function gulp(args: string, options?: IProcessInvocationOptions): IProcessResult;
export declare function gulp(args: string[], options?: IProcessInvocationOptions): IProcessResult;
export declare function gulp(command: CommandBuilder, options?: IProcessInvocationOptions): IProcessResult;
export declare function gulpAsync(args: string, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function gulpAsync(args: string[], options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function gulpAsync(command: CommandBuilder, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function tsc(args: string, options?: IProcessInvocationOptions): IProcessResult;
export declare function tsc(args: string[], options?: IProcessInvocationOptions): IProcessResult;
export declare function tsc(command: CommandBuilder, options?: IProcessInvocationOptions): IProcessResult;
export declare function tscAsync(args: string, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function tscAsync(args: string[], options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function tscAsync(command: CommandBuilder, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function tsNode(args: string, options?: IProcessInvocationOptions): IProcessResult;
export declare function tsNode(args: string[], options?: IProcessInvocationOptions): IProcessResult;
export declare function tsNode(command: CommandBuilder, options?: IProcessInvocationOptions): IProcessResult;
export declare function tsNodeAsync(args: string, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function tsNodeAsync(args: string[], options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function tsNodeAsync(command: CommandBuilder, options?: IProcessInvocationOptions): Promise<IProcessResult>;
export declare function findNpmBinFile(exe: string, workingDirectory?: string): string;
export declare function findNpmBinFileAsync(exe: string, workingDirectory?: string): Promise<string>;
